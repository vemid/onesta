!function (t, i, s, e) {
    "use strict";
    var a = "starRating", n = function () {
    }, r = {
        totalStars: 5,
        useFullStars: !1,
        emptyColor: "lightgray",
        hoverColor: "orange",
        activeColor: "gold",
        useGradient: !0,
        readOnly: !1,
        disableAfterRate: !0,
        starGradient: {start: "#FEF7CD", end: "#FF9511"},
        strokeWidth: 0,
        strokeColor: "black",
        initialRating: 0,
        starSize: 40,
        callback: n,
        onHover: n,
        onLeave: n
    }, o = function (i, s) {
        var e;
        this.element = i, this.$el = t(i), this.settings = t.extend({}, r, s), e = this.$el.data("rating") || this.settings.initialRating, this._state = {rating: (Math.round(2 * e) / 2).toFixed(1)}, this._uid = Math.floor(999 * Math.random()), s.starGradient || this.settings.useGradient || (this.settings.starGradient.start = this.settings.starGradient.end = this.settings.activeColor), this._defaults = r, this._name = a, this.init()
    }, h = {
        init: function () {
            this.renderMarkup(), this.addListeners(), this.initRating()
        }, addListeners: function () {
            this.settings.readOnly || (this.$stars.on("mouseover", this.hoverRating.bind(this)), this.$stars.on("mouseout", this.restoreState.bind(this)), this.$stars.on("click", this.handleRating.bind(this)))
        }, hoverRating: function (t) {
            var i = this.getIndex(t);
            this.paintStars(i, "hovered"), this.settings.onHover(i + 1, this._state.rating, this.$el)
        }, handleRating: function (t) {
            var i = this.getIndex(t), s = i + 1;
            this.applyRating(s, this.$el), this.executeCallback(s, this.$el), this.settings.disableAfterRate && this.$stars.off()
        }, applyRating: function (t) {
            var i = t - 1;
            this.paintStars(i, "active"), this._state.rating = i + 1
        }, restoreState: function (t) {
            var i = this.getIndex(t), s = this._state.rating || -1;
            this.paintStars(s - 1, "active"), this.settings.onLeave(i + 1, this._state.rating, this.$el)
        }, getIndex: function (i) {
            var s = t(i.currentTarget), e = s.width(), a = t(i.target).attr("data-side");
            a = a ? a : this.getOffsetByPixel(i, s, e), a = this.settings.useFullStars ? "right" : a;
            var n = s.index() - ("left" === a ? .5 : 0);
            return n = 0 > n && i.offsetX < e / 5 ? -1 : n
        }, getOffsetByPixel: function (t, i, s) {
            var e = t.pageX - i.offset().left;
            return s / 2 >= e && !this.settings.useFullStars ? "left" : "right"
        }, initRating: function () {
            this.paintStars(this._state.rating - 1, "active")
        }, paintStars: function (i, s) {
            var e, a, n, r;
            t.each(this.$stars, function (o, h) {
                e = t(h).find('polygon[data-side="left"]'), a = t(h).find('polygon[data-side="right"]'), n = r = i >= o ? s : "empty", n = o - i === .5 ? s : n, e.attr("class", "svg-" + n + "-" + this._uid), a.attr("class", "svg-" + r + "-" + this._uid)
            }.bind(this))
        }, renderMarkup: function () {
            for (var t = '<div class="jq-star" style="width:' + this.settings.starSize + "px;  height:" + this.settings.starSize + 'px;"><svg version="1.0" class="jq-star-svg" shape-rendering="geometricPrecision" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="305px" height="305px" viewBox="60 -62 309 309" style="enable-background:new 64 -59 305 305; stroke-width:' + this.settings.strokeWidth + 'px;" xml:space="preserve"><style type="text/css">.svg-empty-' + this._uid + "{fill:url(#" + this._uid + "_SVGID_1_);}.svg-hovered-" + this._uid + "{fill:url(#" + this._uid + "_SVGID_2_);}.svg-active-" + this._uid + "{fill:url(#" + this._uid + "_SVGID_3_);}</style>" + this.getLinearGradient(this._uid + "_SVGID_1_", this.settings.emptyColor, this.settings.emptyColor) + this.getLinearGradient(this._uid + "_SVGID_2_", this.settings.hoverColor, this.settings.hoverColor) + this.getLinearGradient(this._uid + "_SVGID_3_", this.settings.starGradient.start, this.settings.starGradient.end) + '<polygon data-side="left" class="svg-empty-' + this._uid + '" points="281.1,129.8 364,55.7 255.5,46.8 214,-59 172.5,46.8 64,55.4 146.8,129.7 121.1,241 213.9,181.1 213.9,181 306.5,241 " style="stroke: ' + this.settings.strokeColor + '"/><polygon data-side="right" class="svg-empty-' + this._uid + '" points="364,55.7 255.5,46.8 214,-59 213.9,181 306.5,241 281.1,129.8 " style="stroke-dasharray: 230 232 210 0; stroke: ' + this.settings.strokeColor + '"/></svg></div>', i = "", s = 0; s < this.settings.totalStars; s++)i += t;
            this.$el.append(i), this.$stars = this.$el.find(".jq-star")
        }, getLinearGradient: function (t, i, s) {
            return '<linearGradient id="' + t + '" gradientUnits="userSpaceOnUse" x1="121.1501" y1="-70.35" x2="121.15" y2="125.0045"><stop  offset="0" style="stop-color:' + i + '"/><stop  offset="1" style="stop-color:' + s + '"/> </linearGradient>'
        }, executeCallback: function (t, i) {
            var s = this.settings.callback;
            s(t, i)
        }
    }, l = {
        unload: function () {
            var i = "plugin_" + a, s = t(this), e = s.data(i).$stars;
            e.off(), s.removeData(i).remove()
        }, setRating: function (i, s) {
            var e = "plugin_" + a, n = t(this), r = n.data(e);
            i > r.settings.totalStars || 0 > i || (s && (i = Math.round(i)), r.applyRating(i))
        }, getRating: function () {
            var i = "plugin_" + a, s = t(this), e = s.data(i);
            return e._state.rating
        }
    };
    t.extend(o.prototype, h), t.fn[a] = function (i) {
        if (!t.isPlainObject(i)) {
            if (l.hasOwnProperty(i))return l[i].apply(this, Array.prototype.slice.call(arguments, 1));
            t.error("Method " + i + " does not exist on " + a + ".js")
        }
        return this.each(function () {
            t.data(this, "plugin_" + a) || t.data(this, "plugin_" + a, new o(this, i))
        })
    }
}(jQuery, window, document);